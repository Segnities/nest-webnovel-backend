// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

enum NotificationMessageStatus {
  SENT
  PENDING
  READ
  UNREAD
  ARCHIVED
}

enum CommentStatus {
  ACTIVE
  DELETED
  HIDDEN_BY_MODERATOR
  HIDDEN
}

enum NovelStatus {
  ONGOING
  COMPLETED
  HIATUS
  CANCELLED
}

enum NovelFormat {
  LIGHT_NOVEL
  WEB_NOVEL
}

enum NovelTranslationStatus {
  NOT_TRANSLATED
  PARTIALLY_TRANSLATED
  FULLY_TRANSLATED
  MACHINE_TRANSLATED
  ONGOING
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum ROLE_NAME {
  SYSTEM // System role for automatic actions 
  ADMIN // Admin role with full access
  MODERATOR // Moderator role with permissions to manage content and users
  DEFAULT_USER // Regular user with standard permissions
}

enum ApprovalStatus {
  Pending
  Approved
  Rejected
  Reviewed
  Resolved
}

enum BanStatus {
  Active
  Expired
  Appealed
}

enum NotificationRelatedEntity {
  NOVEL
  COMMENT
  REVIEW
  AUTHOR
  SYSTEM
}

model User {
  id                       Int                        @id @default(autoincrement())
  fuid                     String?
  username                 String                     @unique
  email                    String                     @unique @db.VarChar(50)
  firstName                String?                    @db.VarChar(50)
  lastName                 String?                    @db.VarChar(50)
  img                      String?
  isAdult                  Boolean?                   @default(false)
  createdAt                DateTime                   @default(now())
  updatedAt                DateTime                   @updatedAt
  roleId                   Int
  role                     Role                       @relation(fields: [roleId], references: [id])
  teamId                   Int?
  team                     Team?                      @relation(fields: [teamId], references: [id])
  usersRatings             UserRating[]
  comments                 Comment[]
  bookmarks                Bookmark[]
  reviews                  Review[]
  continueReading          ContinueReading[]
  news                     News[]
  userNotificationSettings UserNotificationSettings[]
  novelsSubscription       NovelSubscription[]
  notifications            Notification[]
  authorSubscription       AuthorSubscription[]
  collectionItems          CollectionItem[]

  @@map("user")
}

model Role {
  id          Int     @id @default(autoincrement())
  name        String  @unique @db.VarChar(100)
  description String?
  users       User[]

  @@map("role")
}

model NotificationType {
  id          Int     @id @default(autoincrement())
  name        String  @unique @db.VarChar(100)
  description String?

  notifications Notification[]

  @@map("notification_type")
}

model NotificationGroup {
  id            Int                 @id @default(autoincrement())
  name          String              @db.VarChar(100)
  description   String?
  isDefault     Boolean             @default(false)
  parentGroupId Int?
  parentGroup   NotificationGroup?  @relation("GroupHierarchy", fields: [parentGroupId], references: [id])
  childGroups   NotificationGroup[] @relation("GroupHierarchy")
  notifications Notification[]
  createdAt     DateTime            @default(now())
  updatedAt     DateTime            @updatedAt

  @@map("notification_group")
}

model Notification {
  id                  Int                       @id @default(autoincrement())
  title               String                    @db.VarChar(200)
  message             String
  img                 String
  createdAt           DateTime                  @default(now())
  updatedAt           DateTime                  @updatedAt
  userId              Int
  user                User                      @relation(fields: [userId], references: [id])
  type                NotificationType          @relation(fields: [typeId], references: [id])
  typeId              Int
  relatedEntityType   NotificationRelatedEntity
  relatedEntityId     Int
  notificationStatus  NotificationMessageStatus
  novel               Novel?                    @relation(fields: [novelId], references: [id])
  novelId             Int?
  comment             Comment?                  @relation(fields: [commentId], references: [id])
  commentId           Int?
  review              Review?                   @relation(fields: [reviewId], references: [id])
  reviewId            Int?
  author              Author?                   @relation(fields: [authorId], references: [id])
  authorId            Int?
  metadata            Json?
  notificationGroup   NotificationGroup?        @relation(fields: [notificationGroupId], references: [id])
  notificationGroupId Int?

  @@index([userId, notificationStatus, createdAt])
  @@map("notification")
}

model UserNotificationSettings {
  id                          Int     @id @default(autoincrement())
  receiveSystemNotifications  Boolean @default(true)
  receiveCommentNotifications Boolean @default(true)
  receiveNovelUpdates         Boolean @default(true)
  receiveReviewNotifications  Boolean @default(true)
  receiveAuthorUpdates        Boolean @default(true)
  userId                      Int
  user                        User    @relation(fields: [userId], references: [id])

  @@map("user_notification_settings")
}

model NovelSubscription {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  userId    Int
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  novelId   Int
  novel     Novel    @relation(fields: [novelId], references: [id], onDelete: Cascade)

  @@map("novel_subscription")
}

model AuthorSubscription {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  userId    Int
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  authorId  Int
  author    Author   @relation(fields: [authorId], references: [id], onDelete: Cascade)

  @@map("author_subscription")
}

model Novel {
  id                Int                    @id @default(autoincrement())
  title             String                 @db.VarChar(200)
  original_title    String?                @db.VarChar(200)
  description       String
  slug              String?                @unique @db.VarChar(255)
  img               String
  likes             Int                    @default(0)
  dislikes          Int                    @default(0)
  isAdult           Boolean
  releaseYear       Int?
  coverImg          String?
  createdAt         DateTime               @default(now())
  updatedAt         DateTime               @updatedAt
  views             Int                    @default(0)
  countryId         Int
  country           Country                @relation(fields: [countryId], references: [id])
  status            NovelStatus
  authorId          Int
  author            Author                 @relation(fields: [authorId], references: [id])
  translationStatus NovelTranslationStatus
  format            NovelFormat
  commendableTypeId Int
  commendableType   CommendableType        @relation(fields: [commendableTypeId], references: [id])
  tags              Tag[]
  genres            Genre[]
  alternativeTitles AlternativeTitle[]
  chapters          Chapter[]
  reviews           Review[]
  usersRatings      UserRating[]
  novelSubscription NovelSubscription[]
  notifications     Notification[]
  collectionItems   CollectionItem[]

  @@index([authorId])
  @@map("novel")
}

model ContinueReading {
  id                 Int     @id @default(autoincrement())
  userId             Int
  user               User    @relation(fields: [userId], references: [id])
  lastChapterId      Int
  lastChapter        Chapter @relation(fields: [lastChapterId], references: [id])

  @@map("continue_reading")
}

model Collection {
  id              Int              @id @default(autoincrement())
  title           String           @unique @db.VarChar(200)
  description     String
  isDefault       Boolean          @default(false)
  createdAt       DateTime         @default(now())
  updatedAt       DateTime         @updatedAt
  collectionItems CollectionItem[]

  @@map("collection")
}

model CollectionItem {
  id           Int        @id @default(autoincrement())
  collectionId Int
  collection   Collection @relation(fields: [collectionId], references: [id], onDelete: Cascade)
  novelId      Int
  novel        Novel      @relation(fields: [novelId], references: [id], onDelete: Cascade)
  userId       Int
  user         User       @relation(fields: [userId], references: [id], onDelete: Cascade)
  createdAt    DateTime   @default(now())
  updatedAt    DateTime   @updatedAt

  @@unique([collectionId, novelId, userId])
  @@map("collection_item")
}

model Bookmark {
  id        Int     @id @default(autoincrement())
  userId    Int
  user      User    @relation(fields: [userId], references: [id])
  chapterId Int
  chapter   Chapter @relation(fields: [chapterId], references: [id])

  @@map("bookmark")
}

model UserRating {
  id        Int      @id @default(autoincrement())
  isLiked   Boolean
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  novelId   Int
  novel     Novel    @relation(fields: [novelId], references: [id])
  userId    Int
  user      User     @relation(fields: [userId], references: [id])

  @@index([novelId, userId])
  @@map("user_rating")
}

model Review {
  id                Int             @id @default(autoincrement())
  title             String          @db.VarChar(200)
  body              String
  createdAt         DateTime        @default(now())
  updatedAt         DateTime        @updatedAt
  likes             Int
  views             Int
  userId            Int
  user              User            @relation(fields: [userId], references: [id])
  novelId           Int
  novel             Novel           @relation(fields: [novelId], references: [id])
  commendableTypeId Int
  commendableType   CommendableType @relation(fields: [commendableTypeId], references: [id])
  notifications     Notification[]

  @@map("novel_review")
}

model News {
  id                Int             @id @default(autoincrement())
  title             String          @db.VarChar(200)
  body              String
  likes             Int
  views             Int
  published         Boolean
  createdAt         DateTime        @default(now())
  updatedAt         DateTime        @updatedAt
  commendableTypeId Int
  commendableType   CommendableType @relation(fields: [commendableTypeId], references: [id])
  userId            Int
  user              User            @relation(fields: [userId], references: [id])

  @@index([userId, commendableTypeId, createdAt])
  @@map("news")
}

model Comment {
  id                Int             @id @default(autoincrement())
  userId            Int
  user              User            @relation(fields: [userId], references: [id])
  nestedLevel       Int?
  body              String
  likes             Int             @default(0)
  dislikes          Int             @default(0)
  status            CommentStatus
  commendableTypeId Int
  commendableType   CommendableType @relation(fields: [commendableTypeId], references: [id])
  createdAt         DateTime        @default(now())
  updatedAt         DateTime        @updatedAt
  complaintTypeId   Int
  replyToId         Int?

  replyTo       Comment?       @relation(name: "CommentReplies", fields: [replyToId], references: [id])
  replies       Comment[]      @relation(name: "CommentReplies")
  notifications Notification[]

  @@index([userId, commendableTypeId, createdAt])
  @@map("comment")
}

model CommendableType {
  id       Int       @id @default(autoincrement())
  name     String    @unique @db.VarChar(200)
  novels   Novel[]
  chapters Chapter[]
  reviews  Review[]
  comments Comment[]
  news     News[]

  @@map("comandable_type")
}

model Chapter {
  id                Int               @id @default(autoincrement())
  title             String
  content           String
  likes             Int               @default(0)
  views             Int               @default(0)
  slug              String            @unique @db.VarChar(255)
  chapterNumber     Int
  createdAt         DateTime          @default(now())
  updatedAt         DateTime          @updatedAt
  novelId           Int
  novel             Novel             @relation(fields: [novelId], references: [id], onDelete: Cascade)
  commendableTypeId Int
  commendableType   CommendableType   @relation(fields: [commendableTypeId], references: [id])
  bookmarks         Bookmark[]
  continueNovel     ContinueReading[]

  @@index([novelId, createdAt])
  @@map("chapter")
}

model Team {
  id             Int      @id @default(autoincrement())
  name           String   @db.VarChar(200)
  chapters_count Int      @default(0)
  books_count    Int      @default(0)
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt
  users          User[]

  @@map("team")
}

model AlternativeTitle {
  id      Int    @id @default(autoincrement())
  title   String @db.VarChar(200)
  novelId Int
  novel   Novel  @relation(fields: [novelId], references: [id])

  @@map("alternative_title")
}

model Tag {
  id     Int     @id @default(autoincrement())
  title  String  @unique @db.VarChar(200)
  novels Novel[]

  @@map("tag")
}

model Genre {
  id     Int     @id @default(autoincrement())
  title  String  @unique @db.VarChar(200)
  novels Novel[]

  @@map("genre")
}

model Country {
  id     Int     @id @default(autoincrement())
  title  String  @unique @db.VarChar(200)
  novels Novel[]

  @@map("country")
}

model Author {
  id                 Int                  @id @default(autoincrement())
  name               String               @unique @db.VarChar(200)
  img                String
  novels             Novel[]
  authorSubscription AuthorSubscription[]
  notifications      Notification[]

  @@map("author")
}
