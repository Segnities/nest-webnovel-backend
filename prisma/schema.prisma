// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Provider {
  GOOGLE
  EMAIL_AND_PASSWORD
}

model User {
  id        Int      @id @default(autoincrement())
  username  String   @unique
  email     String   @unique
  provider  Provider
  img       String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  roleId    Int
  role      Role     @relation(fields: [roleId], references: [id])
}

model Role {
  id          Int          @id @default(autoincrement())
  name        String
  description String
  users       User[]
  permissions Permission[]
}

model Permission {
  id          Int    @id @default(autoincrement())
  name        String
  description String
  roleId      Int
  role        Role   @relation(fields: [roleId], references: [id])
}

model Team {
  id          Int    @id @default(autoincrement())
}

model Novel {
  id                  Int                @id @default(autoincrement())
  title               String
  original_title      String
  description         String
  img                 String
  isAdult             Boolean
  releaseYear         Int
  coverImg            String?
  createdAt           DateTime           @default(now())
  updatedAt           DateTime           @updatedAt
  views               Int                @default(0)
  country             Country            @relation(fields: [countryId], references: [id])
  countryId           Int
  status              Status             @relation(fields: [statusId], references: [id])
  statusId            Int
  authorId            Int
  author              Author             @relation(fields: [authorId], references: [id])
  translationStatusId Int
  translationStatus   TranslationStatus  @relation(fields: [translationStatusId], references: [id])
  formatId            Int
  format              Format             @relation(fields: [formatId], references: [id])
  commendableTypeId   Int
  commendableType     CommendableType    @relation(fields: [commendableTypeId], references: [id])
  tags                Tag[]
  genres              Genre[]
  alternativeTitles   AlternativeTitle[]
  chapters            Chapter[]
  reviews             Review[]
  novelRating         NovelRating?
  usersRatings        UserRating[]

  @@map("novel")
}

model NovelRating {
  id          Int   @id @default(autoincrement())
  votesCount  Int
  avgRating   Float
  totalRating Int
  novelId     Int   @unique
  novel       Novel @relation(fields: [novelId], references: [id])
  userId      Int

  @@map("novel_rating")
}

model Bookmark {
  id        Int     @id @default(autoincrement())
  userId    Int
  chapterId Int
  chapter   Chapter @relation(fields: [chapterId], references: [id])

  @@map("bookmark")
}

model UserRating {
  id        Int      @id @default(autoincrement())
  rating    Int
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  novelId   Int
  novel     Novel    @relation(fields: [novelId], references: [id])
  userId    Int

  @@map("rating")
}

model Review {
  id                Int             @id @default(autoincrement())
  title             String
  body              String
  createdAt         DateTime        @default(now())
  updatedAt         DateTime        @updatedAt
  likes             Int
  views             Int
  userId            Int
  novelId           Int
  novel             Novel           @relation(fields: [novelId], references: [id])
  commendableTypeId Int
  commendableType   CommendableType @relation(fields: [commendableTypeId], references: [id])

  @@map("review")
}

model Comment {
  id                Int             @id @default(autoincrement())
  userId            Int
  nestedLevel       Int?
  body              String
  commendableTypeId Int
  commendableType   CommendableType @relation(fields: [commendableTypeId], references: [id])
  createdAt         DateTime        @default(now())
  updatedAt         DateTime        @updatedAt
  replyToId         Int?

  replyTo Comment?  @relation(name: "CommentReplies", fields: [replyToId], references: [id])
  replies Comment[] @relation(name: "CommentReplies")

  @@map("comment")
}

model CommendableType {
  id       Int       @id @default(autoincrement())
  name     String
  novels   Novel[]
  chapters Chapter[]
  reviews  Review[]
  comments Comment[]

  @@map("comandable_type")
}

model Chapter {
  id                Int             @id @default(autoincrement())
  title             String
  content           String
  likes             Int
  createdAt         DateTime        @default(now())
  updatedAt         DateTime        @updatedAt
  novelId           Int
  novel             Novel           @relation(fields: [novelId], references: [id])
  commendableTypeId Int
  commendableType   CommendableType @relation(fields: [commendableTypeId], references: [id])
  bookmarks         Bookmark[]

  @@map("chapter")
}

//novels + chapters
model Team {
  id             Int      @id @default(autoincrement())
  name           String
  chapters_count Int      @default(0)
  books_count    Int      @default(0)
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt

  @@map("team")
}

model Format {
  id     Int     @id @default(autoincrement())
  title  String
  novels Novel[]

  @@map("format")
}

model TranslationStatus {
  id     Int     @id @default(autoincrement())
  title  String
  novels Novel[]

  @@map("translation_status")
}

model AlternativeTitle {
  id      Int    @id @default(autoincrement())
  title   String
  novelId Int
  novel   Novel  @relation(fields: [novelId], references: [id])

  @@map("alternative_title")
}

model Tag {
  id     Int     @id @default(autoincrement())
  title  String
  novels Novel[]

  @@map("tag")
}

model Genre {
  id     Int     @id @default(autoincrement())
  title  String  @unique
  novels Novel[]

  @@map("genre")
}

model Country {
  id     Int     @id @default(autoincrement())
  title  String  @unique
  novels Novel[]

  @@map("country")
}

model Status {
  id     Int     @id @default(autoincrement())
  title  String  @unique
  novels Novel[]

  @@map("status")
}

model Author {
  id     Int     @id @default(autoincrement())
  name   String
  img    String
  novels Novel[]

  @@map("author")
}
