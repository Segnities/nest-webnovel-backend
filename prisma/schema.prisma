// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Provider {
  GOOGLE
  EMAIL_AND_PASSWORD
}

enum ApprovalStatus {
  Pending
  Approved
  Rejected
  Reviewed
  Resolved
}

enum BanStatus {
  Active
  Expired
  Appealed
}

model User {
  id                        Int                     @id @default(autoincrement())
  username                  String                  @unique
  email                     String                  @unique
  provider                  Provider
  img                       String
  createdAt                 DateTime                @default(now())
  updatedAt                 DateTime                @updatedAt
  roleId                    Int
  role                      Role                    @relation(fields: [roleId], references: [id])
  teamId                    Int?
  team                      Team?                   @relation(fields: [teamId], references: [id])
  usersRatings              UserRating[]
  comments                  Comment[]
  bookmarks                 Bookmark[]
  reviews                   Review[]
  userCollectionMapping     UserCollectionMapping[]
  continueReading           ContinueReading[]
  news                      News[]
  userComplaints            UserComplaint[]
  complaintReasons          ComplaintReason[]
  issuedContentComplaints   ContentComplaint[]      @relation("issuedByUserRelation")
  resolvedContentComplaints ContentComplaint[]      @relation("resolvedByUserRelation")
  issuedBans                Ban[]                   @relation("issuedBySystemRelation")
  userBans                  Ban[]                   @relation("userBanRelation")
  reviewedAppeals           Appeal[]
  userNotificationSettings UserNotificationSettings[]

  @@map("user")
}

model Role {
  id          Int          @id @default(autoincrement())
  name        String
  description String
  users       User[]
  permissions Permission[]

  @@map("role")
}

model Permission {
  id          Int    @id @default(autoincrement())
  name        String
  description String
  roleId      Int
  role        Role   @relation(fields: [roleId], references: [id])

  @@map("permission")
}

model UserNotificationSettings {
  id                          Int     @id @default(autoincrement())
  receiveSystemNotifications  Boolean @default(true)
  receiveCommentNotifications Boolean @default(true)
  receiveNovelUpdates         Boolean @default(true)
  receiveReviewNotifications  Boolean @default(true)
  receiveAuthorUpdates        Boolean @default(true)
  userId Int
  user User @relation(fields: [userId], references: [id])
}

model ComplaintTargetType {
  id                  Int                @id @default(autoincrement())
  name                String
  description         String
  complaintCategoryId Int
  complaintCategory   ComplaintCategory  @relation(fields: [complaintCategoryId], references: [id])
  usersComplaints     UserComplaint[]
  contentComplaints   ContentComplaint[]
  bans                Ban[]
  novels              Novel[]
  reviews             Review[]
  news                News[]
  comments            Comment[]
  chapter             Chapter[]

  @@map("complaint_target_type")
}

model ComplaintCategory {
  id                   Int                   @id @default(autoincrement())
  name                 String
  description          String
  complaintTargetTypes ComplaintTargetType[]

  @@map("complaint_category")
}

model UserComplaint {
  id                  Int                 @id @default(autoincrement())
  status              ApprovalStatus
  createdAt           DateTime            @default(now())
  reasonId            Int
  reason              ComplaintReason     @relation(fields: [reasonId], references: [id])
  userId              Int
  user                User                @relation(fields: [userId], references: [id])
  complaintTargetId   Int
  complaintTargetType ComplaintTargetType @relation(fields: [complaintTargetId], references: [id])

  @@map("user_complaint")
}

model ContentComplaint {
  id                  Int                 @id @default(autoincrement())
  status              ApprovalStatus
  contentId           Int
  createdAt           DateTime            @default(now())
  updatedAt           DateTime            @updatedAt
  reasonId            Int
  complaintReason     ComplaintReason     @relation(fields: [reasonId], references: [id])
  complaintTargetId   Int
  complaintTargetType ComplaintTargetType @relation(fields: [complaintTargetId], references: [id])
  resolvedAt          DateTime
  issuedBy            Int
  issuedByUser        User                @relation(fields: [issuedBy], references: [id], name: "issuedByUserRelation")
  resolvedBy          Int
  resolvedByUser      User                @relation(fields: [resolvedBy], references: [id], name: "resolvedByUserRelation")

  @@map("content_complaint")
}

model ComplaintReason {
  id                Int                @id @default(autoincrement())
  title             String
  description       String
  userComplaints    UserComplaint[]
  contentComplaints ContentComplaint[]
  createdAt         DateTime           @default(now())
  User              User?              @relation(fields: [userId], references: [id])
  userId            Int?

  @@map("complaint_reason")
}

model Ban {
  id                  Int                 @id @default(autoincrement())
  banStart            DateTime            @default(now())
  banEnd              DateTime
  duration            Int
  appealed            Boolean             @default(false)
  appealId            Int
  appeal              Appeal              @relation(fields: [appealId], references: [id])
  createdAt           DateTime            @default(now())
  updatedAt           DateTime            @updatedAt
  issuedBy            Int
  issuedByUser        User                @relation(fields: [issuedBy], references: [id], name: "issuedBySystemRelation")
  userId              Int
  user                User                @relation(fields: [userId], references: [id], name: "userBanRelation")
  complaintTargetId   Int
  complaintTargetType ComplaintTargetType @relation(fields: [complaintTargetId], references: [id])
}

model Appeal {
  id             Int            @id @default(autoincrement())
  title          String
  body           String
  createdAt      DateTime       @default(now())
  updatedAt      DateTime       @updatedAt
  reviewedAt     DateTime
  status         ApprovalStatus
  bans           Ban[]
  appealReasonId Int
  appeal         AppelaReason   @relation(fields: [appealReasonId], references: [id])
  reviewedBy     Int
  reviewedByUser User           @relation(fields: [reviewedBy], references: [id])
}

model AppelaReason {
  id          Int    @id @default(autoincrement())
  name        String
  description String

  appeals Appeal[]
}

model BanReason {
  id          Int    @id @default(autoincrement())
  title       String
  description String
}

model Novel {
  id                     Int                      @id @default(autoincrement())
  title                  String
  original_title         String
  description            String
  img                    String
  isAdult                Boolean
  releaseYear            Int
  coverImg               String?
  createdAt              DateTime                 @default(now())
  updatedAt              DateTime                 @updatedAt
  views                  Int                      @default(0)
  country                Country                  @relation(fields: [countryId], references: [id])
  countryId              Int
  status                 Status                   @relation(fields: [statusId], references: [id])
  statusId               Int
  authorId               Int
  author                 Author                   @relation(fields: [authorId], references: [id])
  translationStatusId    Int
  translationStatus      TranslationStatus        @relation(fields: [translationStatusId], references: [id])
  formatId               Int
  format                 Format                   @relation(fields: [formatId], references: [id])
  commendableTypeId      Int
  commendableType        CommendableType          @relation(fields: [commendableTypeId], references: [id])
  tags                   Tag[]
  genres                 Genre[]
  alternativeTitles      AlternativeTitle[]
  chapters               Chapter[]
  reviews                Review[]
  novelRating            NovelRating?
  usersRatings           UserRating[]
  novelCollectionMapping NovelCollectionMapping[]
  complaintTargetId      Int
  complainTargetType     ComplaintTargetType      @relation(fields: [complaintTargetId], references: [id])
  continueReading        ContinueReading[]

  @@map("novel")
}

model ContinueReading {
  id                 Int     @id @default(autoincrement())
  progressPercentage Float
  userId             Int
  user               User    @relation(fields: [userId], references: [id])
  lastChapterId      Int
  lastChapter        Chapter @relation(fields: [lastChapterId], references: [id])
  novelId            Int
  novel              Novel   @relation(fields: [novelId], references: [id])

  @@map("continue_reading")
}

model NovelCollectionMapping {
  id                    Int                   @id @default(autoincrement())
  novelId               Int
  novel                 Novel                 @relation(fields: [novelId], references: [id])
  userCollectionId      Int
  userCollectionMapping UserCollectionMapping @relation(fields: [userCollectionId], references: [id])
  createdAt             DateTime              @default(now())
  updatedAt             DateTime              @updatedAt

  @@unique([novelId, userCollectionId])
  @@map("novel_collection_mapping")
}

model UserCollectionMapping {
  id           Int        @id @default(autoincrement())
  collectionId Int
  collection   Collection @relation(fields: [collectionId], references: [id])
  userId       Int
  user         User       @relation(fields: [userId], references: [id])
  createdAt    DateTime   @default(now())
  updatedAt    DateTime   @updatedAt

  novelCollectionMapping NovelCollectionMapping[]

  @@unique([collectionId, userId])
  @@map("user_collection_mapping")
}

model Collection {
  id          Int      @id @default(autoincrement())
  title       String
  description String
  isDefault   Boolean  @default(false)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  userCollectionMapping UserCollectionMapping[]

  @@map("collection")
}

model NovelRating {
  id          Int   @id @default(autoincrement())
  votesCount  Int
  avgRating   Float
  totalRating Int
  novelId     Int   @unique
  novel       Novel @relation(fields: [novelId], references: [id])

  @@map("novel_rating")
}

model Bookmark {
  id        Int     @id @default(autoincrement())
  userId    Int
  user      User    @relation(fields: [userId], references: [id])
  chapterId Int
  chapter   Chapter @relation(fields: [chapterId], references: [id])

  @@map("bookmark")
}

model UserRating {
  id        Int      @id @default(autoincrement())
  rating    Int
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  novelId   Int
  novel     Novel    @relation(fields: [novelId], references: [id])
  userId    Int
  user      User     @relation(fields: [userId], references: [id])

  @@map("rating")
}

model Review {
  id                 Int                 @id @default(autoincrement())
  title              String
  body               String
  createdAt          DateTime            @default(now())
  updatedAt          DateTime            @updatedAt
  likes              Int
  views              Int
  userId             Int
  user               User                @relation(fields: [userId], references: [id])
  novelId            Int
  novel              Novel               @relation(fields: [novelId], references: [id])
  commendableTypeId  Int
  commendableType    CommendableType     @relation(fields: [commendableTypeId], references: [id])
  complaintTargetId  Int
  complainTargetType ComplaintTargetType @relation(fields: [complaintTargetId], references: [id])

  @@map("review")
}

model News {
  id                 Int                 @id @default(autoincrement())
  title              String
  body               String
  likes              Int
  views              Int
  published          Boolean
  createdAt          DateTime            @default(now())
  updatedAt          DateTime            @updatedAt
  commendableTypeId  Int
  commendableType    CommendableType     @relation(fields: [commendableTypeId], references: [id])
  userId             Int
  user               User                @relation(fields: [userId], references: [id])
  complaintTargetId  Int
  complainTargetType ComplaintTargetType @relation(fields: [complaintTargetId], references: [id])

  @@map("news")
}

model Comment {
  id                 Int                 @id @default(autoincrement())
  userId             Int
  user               User                @relation(fields: [userId], references: [id])
  nestedLevel        Int?
  body               String
  commendableTypeId  Int
  commendableType    CommendableType     @relation(fields: [commendableTypeId], references: [id])
  createdAt          DateTime            @default(now())
  updatedAt          DateTime            @updatedAt
  complaitTypeId     Int
  replyToId          Int?
  complaintTargetId  Int
  complainTargetType ComplaintTargetType @relation(fields: [complaintTargetId], references: [id])

  replyTo Comment?  @relation(name: "CommentReplies", fields: [replyToId], references: [id])
  replies Comment[] @relation(name: "CommentReplies")

  @@map("comment")
}

model CommendableType {
  id       Int       @id @default(autoincrement())
  name     String
  novels   Novel[]
  chapters Chapter[]
  reviews  Review[]
  comments Comment[]
  news     News[]

  @@map("comandable_type")
}

model Chapter {
  id                 Int                 @id @default(autoincrement())
  title              String
  content            String
  likes              Int
  createdAt          DateTime            @default(now())
  updatedAt          DateTime            @updatedAt
  novelId            Int
  novel              Novel               @relation(fields: [novelId], references: [id])
  commendableTypeId  Int
  commendableType    CommendableType     @relation(fields: [commendableTypeId], references: [id])
  bookmarks          Bookmark[]
  complaitTypeId     Int
  complaintTargetId  Int
  complainTargetType ComplaintTargetType @relation(fields: [complaintTargetId], references: [id])
  continueNovel      ContinueReading[]

  @@map("chapter")
}

//novels + chapters
model Team {
  id             Int      @id @default(autoincrement())
  name           String
  chapters_count Int      @default(0)
  books_count    Int      @default(0)
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt
  users          User[]

  @@map("team")
}

model Format {
  id     Int     @id @default(autoincrement())
  title  String
  novels Novel[]

  @@map("format")
}

model TranslationStatus {
  id     Int     @id @default(autoincrement())
  title  String
  novels Novel[]

  @@map("translation_status")
}

model AlternativeTitle {
  id      Int    @id @default(autoincrement())
  title   String
  novelId Int
  novel   Novel  @relation(fields: [novelId], references: [id])

  @@map("alternative_title")
}

model Tag {
  id     Int     @id @default(autoincrement())
  title  String
  novels Novel[]

  @@map("tag")
}

model Genre {
  id     Int     @id @default(autoincrement())
  title  String  @unique
  novels Novel[]

  @@map("genre")
}

model Country {
  id     Int     @id @default(autoincrement())
  title  String  @unique
  novels Novel[]

  @@map("country")
}

model Status {
  id     Int     @id @default(autoincrement())
  title  String  @unique
  novels Novel[]

  @@map("status")
}

model Author {
  id     Int     @id @default(autoincrement())
  name   String
  img    String
  novels Novel[]

  @@map("author")
}
